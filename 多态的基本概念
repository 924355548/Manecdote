#include<iostream>
using namespace std;
class Animal{
public:
	virtual void speak(){
		cout<<"动物在说话"<<endl;
	}
};
class Cat:public Animal{
public:
	void speak(){
		cout<<"小猫在说话"<<endl;
	}
};
class Dog:public Animal{
public:
	void speak(){
		cout<<"小狗在说话"<<endl; 
	}
};
//执行说话的函数
//地址早绑定 在编译阶段确定函数地址 
//如果想执行让猫说话， 那么这个函数地址不能提前绑定，需要在运行阶段进行晚绑定； 
//动态多态满足条件
//1，有继承关系
//2.子类重写父亲的虚函数，重写（函数名 返回值 参数类型相同） 
void doSpeak(Animal &animal){
	animal.speak();
}
void doSpeak2(Cat &cat){
	cat.speak();
}
void test(){

	Dog d;
	doSpeak(d);
}
int main(){
	test();
	system("pause");
	return 0;
}
