#include<iostream>
using namespace std;
//抽象不同零件类
//抽象cpu 
class CPU{
public:
	//抽象计算函数 
	virtual void calculate()=0;
}; 
//抽象显卡类 
class VideoCard{
public:
	//抽象的显示函数 
	virtual void display()=0;
};
//抽象内存条类 
class Memory{
public:
	//抽象的存储函数  
	virtual void storage()=0;
};
class Computer{
public:
	Computer(CPU *cpu,VideoCard  *vc,Memory *mem){
		m_cpu=cpu;
		m_vc=vc;
		m_mem=mem;
	}
	//提供工作函数 
	void work(){
		m_cpu->calculate();
		m_vc->display();
		m_mem->storage();
	}
	~Computer(){
		if(m_cpu!=NULL){
			delete m_cpu;
			m_cpu=NULL;
		}
		if(m_vc!=NULL){
			delete m_vc;
			m_vc=NULL;
		}
		if(m_mem!=NULL){
			delete m_mem;
			m_mem=NULL;
		}
	}
private:
	CPU *m_cpu;
	VideoCard *m_vc;
	Memory *m_mem;
};
class IntelCPU:public CPU{
	virtual	void calculate(){
		cout<<"Inter的CPU开始计算了"<<endl;
	}
};
class IntelVideoCard:public VideoCard{
	virtual	void display(){
		cout<<"Inter的显卡开始显示了"<<endl;
	}
};
class IntelMemory:public Memory{
	virtual	void storage(){
		cout<<"Inter的内存条开始存储了"<<endl;
	}
};
class lenovoCPU:public CPU{
	virtual	void calculate(){
		cout<<"lenovo的CPU开始计算了"<<endl;
	}
};
class lenovoVideoCard:public VideoCard{
	virtual	void display(){
		cout<<"lenovo的显卡开始显示了"<<endl;
	}
};
class lenovoMemory:public Memory{
	virtual	void storage(){
		cout<<"lenovo的内存条开始存储了"<<endl;
	}
};
void test01(){
	CPU *intelCpu=new IntelCPU;
	VideoCard *intelCard=new IntelVideoCard;
	Memory *intelMem=new IntelMemory;
	Computer *computer1=new Computer(intelCpu,intelCard,intelMem);
	computer1->work();
	delete computer1;

} 

int main()
{
	test01();
	return 0;
 } 
